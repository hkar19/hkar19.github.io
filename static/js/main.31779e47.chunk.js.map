{"version":3,"sources":["store/actions/todoAction.js","store/actions/actionTypes.js","components/Form/Form.js","store/actions/notesAction.js","components/List/TextAndForm.js","components/List/List.js","components/NoteList/NoteList.js","store/reducers/todoReducer.js","store/reducers/noteReducer.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["deleteTodo","index","type","payload","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","state","length","choice","addTodo","addNote","onClickChoice","console","log","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","placeholder","Component","connect","dispatch","todo","note","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","cancelButtonHandler","deleteButtonHandler","buttonEdit","List","whatToShow","todos","map","key","List_TextAndForm","todoReducer","NoteList","notes","noteReducer","initialstate","initialState","rootReducer","combineReducers","arguments","undefined","action","objectSpread","toConsumableArray","newTodos","splice","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","App","es","components_Form_Form","components_List_List","components_NoteList_NoteList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31779e47.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addTodo = (todo) =>        ({type: actionTypes.ADD_TODO, payload:todo});\r\nexport const deleteTodo = (index) =>    ({type: actionTypes.DELETE_TODO, payload:index});\r\nexport const editTodo = (index,todo) => ({type: actionTypes.EDIT_TODO, index:index, todo:todo});","export const ADD_TODO   = 'ADD_TODO';\r\nexport const EDIT_TODO  = 'EDIT_TODO';\r\nexport const DELETE_TODO= 'DELETE_TODO';\r\n\r\nexport const ADD_NOTE   = 'ADD_NOTE';","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport { addTodo } from '../../store/actions/todoAction';\nimport { addNote } from \"../../store/actions/notesAction\";\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    if(this.state.text.length === 0) return;\n    else{\n      if(this.state.choice ==='Todo') this.props.addTodo(this.state.text);\n      else this.props.addNote(this.state.text);\n    }\n    \n    \n    this.setState({ text: '' })\n  }\n\n  onClickChoice = (choice)=>{\n    console.log(\"switching to\",choice);\n    this.setState({ choice })\n  }\n\n  render () {\n    let styleButtonTodo = ''\n    let styleButtonNotes= '';\n    this.state.choice === 'Todo' ? styleButtonTodo= 'btn-success': styleButtonNotes='btn-success';\n    return (\n      <>\n        \n        <button \n          className={`btn m-2 ${styleButtonTodo}`}\n          onClick={()=>this.onClickChoice('Todo')}\n          >Switch to Add Todo</button>\n        <button \n          className={`btn ${styleButtonNotes}`}\n          onClick={()=>this.onClickChoice('Notes')}\n          >Switch to Add Notes</button>\n        <p>Add {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder={`Type ${this.state.choice} here`} />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \n\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n    addTodo: (todo)=> dispatch(addTodo(todo)),\n    addNote: (note)=> dispatch(addNote(note))\n  }\n}\n\n// export default Form\nexport default connect(null,mapDispatchToProps)(Form);\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addNote = (note) =>({type:actionTypes.ADD_NOTE, payload:note});","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { editTodo,deleteTodo } from \"../../store/actions/todoAction\";\r\n\r\nclass TextAndForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             viewMode: 'show',\r\n             text:props.todo\r\n        }\r\n    }\r\n    \r\n    editButtonHandler = ()=>{\r\n        this.setState({viewMode: 'edit'});\r\n    }\r\n\r\n    saveButtonHandler = ()=>{\r\n        this.props.editTodo(this.props.index,this.state.text);\r\n        this.setState({viewMode:'show'});\r\n    }\r\n\r\n    cancelButtonHandler = ()=>{\r\n        this.setState({viewMode: 'show'});\r\n    }\r\n\r\n    onChangeHandler = (e) => {\r\n        this.setState({text: e.target.value});\r\n    }\r\n\r\n    deleteButtonHandler = ()=>{\r\n        this.props.deleteTodo(this.props.index);\r\n    }\r\n    \r\n    render() {\r\n        let todo = (<p>{this.props.todo}</p>);\r\n        let buttonEdit = (\r\n            <button \r\n                className=\"btn btn-primary\"\r\n                onClick={this.editButtonHandler}>\r\n                Edit\r\n            </button>);\r\n        if(this.state.viewMode === 'edit'){\r\n            todo = (\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    value={this.state.text}\r\n                    onChange={this.onChangeHandler}\r\n                >\r\n                </input>\r\n            )\r\n\r\n            buttonEdit = (\r\n                <>\r\n                    <button\r\n                        className= \"btn btn-success\"\r\n                        onClick={this.saveButtonHandler}\r\n                        >\r\n                        Save\r\n                    </button>\r\n                    <button\r\n                        className= \"btn btn-warning\"\r\n                        onClick= {this.cancelButtonHandler}\r\n                        >\r\n                        Cancel\r\n                    </button>\r\n                </>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                    {todo}\r\n                </div>\r\n\r\n                <div className=\"col-4\">\r\n                    \r\n                    <p>index: {this.props.index}</p>\r\n                    {buttonEdit}\r\n                    <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.deleteButtonHandler}\r\n                        >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        editTodo: (index,todo) => dispatch(editTodo(index,todo)),\r\n        deleteTodo: (index) => dispatch(deleteTodo(index))\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(TextAndForm);","import React, { Component } from 'react'\nimport { connect } from \"react-redux\";\nimport TextAndForm from './TextAndForm';\nimport { deleteTodo } from \"../../store/actions/todoAction\";\n\nclass List extends Component {\n\n  deleteHandler(index){\n    this.props.deleteTodo(index);\n  }\n\n  render (){\n    let whatToShow = this.props.todos.map((todo,index) => (\n      <li key={index} className=\"list-group-item container\">\n        <TextAndForm\n          todo={todo}\n          index={index}\n          // onDelete={()=>this.deleteHandler(index)}\n          >\n        </TextAndForm>\n      </li>\n    ));\n\n    return (\n      <div>\n        <p>Todos</p>\n        <ul className=\"list-group\">\n        {whatToShow.length ? whatToShow:\"you dont have any todos\"}\n      </ul>\n      </div>\n      \n    )    \n  }\n}\n\nconst mapStateToProps = (state)=>{\n  return {\n    todos: state.todoReducer.todos\n  }\n}\n\nconst mapDispatchToProps =(dispatch) =>{\n  return {\n    deleteTodo: (index)=> dispatch(deleteTodo(index))\n  }\n}\n\n// export default List\nexport default connect(mapStateToProps,mapDispatchToProps)(List);\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass NoteList extends Component {\r\n    \r\n    render() {\r\n        let whatToShow = this.props.notes.map((note,index)=>(\r\n            <li key={index} className=\"list-group-item container\">\r\n                {note}\r\n            </li>\r\n        ));\r\n        return (\r\n            <div>\r\n                <p>Notes</p>\r\n                <ul className=\"list-group\">\r\n                    {whatToShow.length ? whatToShow:\"you dont have any notes\"}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        notes: state.noteReducer.notes\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,null)(NoteList);\r\n","import * as actionTypes from '../actions/actionTypes'\r\n\r\nconst initialstate = {\r\n    todos: []\r\n}\r\n\r\nexport const todoReducer = (state = initialstate,action)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n        case actionTypes.DELETE_TODO:\r\n            {\r\n                let newTodos = [...state.todos];\r\n                console.log(\"deleting todo with index:\",action.payload);\r\n                newTodos.splice(action.payload,1);\r\n\r\n                return{\r\n                    ...state,\r\n                    todos: newTodos\r\n                }\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            {\r\n                let newTodos = [...state.todos];\r\n\r\n                let index = action.index;\r\n                let todo = action.todo;\r\n                console.log(\"action\",action)\r\n                console.log(\"index\",index);\r\n                console.log(\"todo\",todo);\r\n                newTodos[index]= todo;\r\n                return{\r\n                    ...state,\r\n                    todos: newTodos\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    notes: []\r\n}\r\n\r\nexport const noteReducer = (state = initialState,action)=>{\r\n    switch (action.type){\r\n        case actionTypes.ADD_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes,action.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\n\r\nimport { todoReducer } from \"./reducers/todoReducer\";\r\nimport { noteReducer } from \"./reducers/noteReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nstore.subscribe(()=>{\r\n    console.log('subscription',store.getState());\r\n})\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List';\nimport NoteList from \"./components/NoteList/NoteList\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store} >\n        <div className=\"App container\">\n          <Form/>\n          <List/>\n          <NoteList/>\n        </div>  \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}